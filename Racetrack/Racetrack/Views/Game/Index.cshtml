@{
    ViewBag.Title = "Game";
}
<!DOCTYPE html>
<html>
<head>
</head>
<body>
    <h2>Racetrack</h2>
    <canvas id="arena"></canvas>
</body>
</html>
@section scripts {
	<!--Script references. -->
	<!--Reference the jQuery library. -->
	<script src="../../Scripts/jquery-3.1.1.min.js"></script>
	<!--Reference the SignalR library. -->
	<script src="../../Scripts/jquery.signalR-2.2.1.min.js"></script>
	<!--Reference the autogenerated SignalR hub script. -->
	<script src="~/signalr/hubs"></script>
	<!--Add script to update the page and send messages.-->
	<script type="text/javascript">
		$(function() {
			var map;
			var arena_color = "rgba(0, 0, 255, 0.65)";
			var finish_line_color = "rgba(252, 101, 0, 0.2)";
			var numOfPlayers = 0;
			var maxNumOfPlayers = 4;
			var names = [];
			var myname;
			var players_id = [0, 1, 2, 3];
			var players_x = []; //[1, 2, 3, 4];
			var players_y = []; //[17, 17, 17, 17];
			var players_vx = []; //[0, 0, 0, 0];
			var players_vy = []; //[0, 0, 0, 0];
			var players_colors = ["#4cff00", "#ff0000", "#0000ff", "#ff00ff"];
			var players_connect = [1, 1, 1, 1]; // показывает подключен ли данный игрок // грязный хак
			var canMove = true;
			var finish_line_y;
			var finish_line_x1, finish_line_x2;

			var sizeOfCell = 32; //размер одной клетки

			function showWorld() {
				// arena - отрисовка фона
				var arena = document.getElementById('arena');
				if (!arena.getContext) {
					return;
				}
				var ctx = arena.getContext('2d');
				var n = map.length; // количество клеток - считаем что поле квадратное
				arena.width = sizeOfCell * n;
				arena.height = sizeOfCell * n;
				for (var i = 0; i < map.length; ++i) {
					for (var j = 0; j < map[i].length; ++j) {
						if (map[i][j] === 1) {
							ctx.fillStyle = arena_color;
							ctx.fillRect(j * sizeOfCell, i * sizeOfCell, sizeOfCell, sizeOfCell);
						}
					}
				}
				console.log(finish_line_x1 + ', ' + finish_line_x2);
				for (var i = finish_line_x1; i <= finish_line_x2; ++i) {
					ctx.fillStyle = finish_line_color;
					ctx.fillRect(i * sizeOfCell, finish_line_y * sizeOfCell, sizeOfCell, sizeOfCell);
				}
				//рисование вертикальных линий
				for (var x = 0.5; x < arena.width; x += sizeOfCell) {
					ctx.moveTo(x, 0);
					ctx.lineTo(x, arena.height);
				}
				//рисование горизонтальных линий
				for (var y = 0.5; y < arena.height; y += sizeOfCell) {
					ctx.moveTo(0, y);
					ctx.lineTo(arena.width, y);
				}
				ctx.strokeStyle = "#eee";
				ctx.stroke();

				//рисование всех игроков
			    //ctx.globalAlpha = 0.9;
				ctx.globalAlpha = 1.0;
				for (var i = 0; i < players_x.length; i++) {
					showPlayer(i, ctx);
				}
				ctx.globalAlpha = 0.6;
				// рисование возможности хода игрока
				var p = getPlayerId(myname);
				if (p === -1) {
					alert("p=-1 in showWorld");
				}
				showPlayerScope(p, ctx);
				ctx.globalAlpha = 1;
		};

		showPlayer = function(p, ctx) {
			var r = 0.5 * sizeOfCell;
			var x = players_x[p];
			var y = players_y[p];
			ctx.strokeStyle = players_colors[p];
			ctx.fillStyle = players_colors[p];
			ctx.beginPath();
			ctx.arc(x * sizeOfCell + r, y * sizeOfCell + r, r - 2, 0, Math.PI * 2, true);
			ctx.fill(); //5
		};

		calculateScopePositions = function(x, y, r) {
			return {
				7: [x * sizeOfCell - r, y * sizeOfCell - r],
				8: [x * sizeOfCell + r, y * sizeOfCell - r],
				9: [(x + 1) * sizeOfCell + r, y * sizeOfCell - r],
				4: [x * sizeOfCell - r, y * sizeOfCell + r],
				5: [x * sizeOfCell + r, y * sizeOfCell + r],
				6: [(x + 1) * sizeOfCell + r, y * sizeOfCell + r],
				1: [x * sizeOfCell - r, (y + 1) * sizeOfCell + r],
				2: [x * sizeOfCell + r, (y + 1) * sizeOfCell + r],
				3: [(x + 1) * sizeOfCell + r, (y + 1) * sizeOfCell + r]
			}
		}

		showPlayerScope = function(p, ctx) {
			var r = 0.5 * sizeOfCell;
			var x = players_x[p] + players_vx[p];
			var y = players_y[p] + players_vy[p];
			ctx.strokeStyle = players_colors[p];
			ctx.fillStyle = players_colors[p];
			// 7 8 9
			// 4 5 6
			// 1 2 3
			ctx.beginPath();
			ctx.arc(x * sizeOfCell - r, y * sizeOfCell - r, r - 2, 0, Math.PI * 2, true);
			ctx.stroke(); //7
			ctx.beginPath();
			ctx.arc(x * sizeOfCell + r, y * sizeOfCell - r, r - 2, 0, Math.PI * 2, true);
			ctx.stroke(); //8
			ctx.beginPath();
			ctx.arc((x + 1) * sizeOfCell + r, y * sizeOfCell - r, r - 2, 0, Math.PI * 2, true);
			ctx.stroke(); //9
			ctx.beginPath();
			ctx.arc(x * sizeOfCell - r, y * sizeOfCell + r, r - 2, 0, Math.PI * 2, true);
			ctx.stroke(); //4
			ctx.beginPath();
			ctx.arc(x * sizeOfCell + r, y * sizeOfCell + r, r - 2, 0, Math.PI * 2, true);
			ctx.stroke(); //5
			ctx.beginPath();
			ctx.arc((x + 1) * sizeOfCell + r, y * sizeOfCell + r, r - 2, 0, Math.PI * 2, true);
			ctx.stroke(); //6
			ctx.beginPath();
			ctx.arc(x * sizeOfCell - r, (y + 1) * sizeOfCell + r, r - 2, 0, Math.PI * 2, true);
			ctx.stroke(); //1
			ctx.beginPath();
			ctx.arc(x * sizeOfCell + r, (y + 1) * sizeOfCell + r, r - 2, 0, Math.PI * 2, true);
			ctx.stroke(); //2
			ctx.beginPath();
			ctx.arc((x + 1) * sizeOfCell + r, (y + 1) * sizeOfCell + r, r - 2, 0, Math.PI * 2, true);
			ctx.stroke(); //3
		}

		var game = $.connection.gameHub;

		game.client.showMap = function(worldModel, myName, allPlayers) {
			map = worldModel.Map.slice();
			finish_line_y = worldModel.finish_line_y;
			finish_line_x1 = Math.min(worldModel.finish_line_x1, worldModel.finish_line_x2);
			finish_line_x2 = Math.max(worldModel.finish_line_x1, worldModel.finish_line_x2);
			for (var i = 0; i < map.length; ++i) {
				for (var j = 0; j < map[i].length; ++j) {
					if (map[i][j] === 2 && players_x.length < allPlayers.length) {
						players_x.push(j);
						players_y.push(i);
						players_vx.push(0);
						players_vy.push(0);
					}
				}
			}
			myname = myName;
			for (var i = 0; i < allPlayers.length; ++i) {
				if (names.length < maxNumOfPlayers) {
					names.push(allPlayers[i]);
					players_connect[numOfPlayers] = 1;
					numOfPlayers++;
				} else {
					alert("There is maxNumOfPlayers limit = 4");
				}
			}
			showWorld();
		};

		getPlayerId = function(name) {
			var p = -1;
			switch (name) {
			case names[0]:
				p = 0;
				break;
			case names[1]:
				p = 1;
				break;
			case names[2]:
				p = 2;
				break;
			case names[3]:
				p = 3;
				break;
			default:
				alert("undefined player in getPlayerId");
			}
			return p;
		};

		setPos = function(p, prevPos, curPos) {
			players_x[p] = curPos.X;
			players_y[p] = curPos.Y;
			players_vx[p] = curPos.X - prevPos.X;
			players_vy[p] = curPos.Y - prevPos.Y;
		};

		game.client.showMovements = function(round, name, prevPos, curPos) {
			var p = getPlayerId(name);
			setPos(p, prevPos, curPos);
			showWorld();
		};
		var isCrashed = false;
		game.client.onCrash = function() {
			alert("You lose :(");
			isCrashed = true;
			canMove = false;
		};
		game.client.beginNextRound = function() {
			if (!isCrashed) {
				canMove = true;
			}
		};
		game.client.showEndOfGame = function(isWinner) {
			if (isWinner) {
				alert("You win!");
			} else {
				if (!isCrashed) {
					alert("You lose :(");
				}
			}
			document.location.href = "/Game/Result";
		};
		$('#message').focus();
		$.connection.hub.start()
			.done(function() {
				$('#arena')
					.click(function(e) {
						if (!canMove) {
							return;
						}
						var p = getPlayerId(myname);
						var r = 0.5 * sizeOfCell;
						var x = players_x[p] + players_vx[p];
						var y = players_y[p] + players_vy[p];


						var scopePositions = calculateScopePositions(x, y, r);

						var posX = e.pageX - $(this).position().left,
							posY = e.pageY - $(this).position().top;

						for (var i = 1; i <= 9; ++i) {
							if ((posX - scopePositions[i][0]) * (posX - scopePositions[i][0]) +
								(posY - scopePositions[i][1]) * (posY - scopePositions[i][1]) <=
								r * r) {
								game.server.updatePlayer({
									key: i
								});
								canMove = false;
								break;
							}
						}
					});
			});
	});
    </script>
}
