@{
    ViewBag.Title = "Game";
}
<!DOCTYPE html>
<html>
<head>
    @*<link rel="stylesheet" href="StyleSheet.css" />*@
</head>
<body>
    <h2>Racetrack</h2>
    <div class="container">
        <input type="text" id="message" />
        <input type="button" id="sendmessage" value="Send" />
        <input type="hidden" id="displayname" />
        @*<canvas id="arena"></canvas>*@
        @*<canvas id="player1"></canvas>
            <canvas id="player2"></canvas>
            <canvas id="player3"></canvas>
            <canvas id="player4"></canvas>*@
    </div>
    <canvas id="arena"></canvas>
    @*<canvas id="player1"></canvas>*@

    @*<canvas id="possibility"></canvas>*@

</body>
</html>
@section scripts {
    <!--Script references. -->
    <!--Reference the jQuery library. -->
    <script src="../../Scripts/jquery-3.1.1.min.js"></script>
    <!--Reference the SignalR library. -->
    <script src="../../Scripts/jquery.signalR-2.2.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--Add script to update the page and send messages.-->
    <script type="text/javascript">
        $(function () {
            // arena - отрисовка фона
            var map;
            var arena_color = "#0000aa";
            var names = [];
            var players_id = [0, 1, 2, 3];
            var players_x = [1, 2, 3, 4];
            var players_y = [4, 3, 2, 1];
            var players_colors = ["#4cff00", "#ff0000", "#0000ff", "#ff00ff"];
            var players_connect = [1, 1, 1, 1]; // показывает подключен ли данный игрок

            var sizeOfCell = 32; //размер одной клетки

            function showWorld() {
                // arena - отрисовка фона
                var arena = document.getElementById('arena');
                if (arena.getContext) {
                    var ctx = arena.getContext('2d');
                    var n = map.length; // количество клеток - считаем что поле квадратное
                    arena.width = sizeOfCell * n;
                    arena.height = sizeOfCell * n;

                    for (var i = 0; i < map.length; ++i) {
                        for (var j = 0; j < map[i].length; ++j) {
                            if (map[i][j] == 1) {
                                //ctx.fillStyle = "#0000aa";
                                ctx.fillStyle = arena_color;
                                ctx.fillRect(j * sizeOfCell, i * sizeOfCell, sizeOfCell, sizeOfCell);
                            }
                            //if (map[i][j] == 2) {
                                //player1_x = j;
                                //player1_y = i;

                                //players_x[0] = i; players_x[1] = i; players_x[2] = i; players_x[3] = i;
                                //players_y[0] = j; players_y[1] = j; players_y[2] = j; players_y[3] = j;

                                //showPlayer(0, ctx);

                                //var r = 0.5 * sizeOfCell;
                                //ctx.beginPath();
                                //ctx.arc(j * sizeOfCell + r,
                                //        i * sizeOfCell + r,
                                //        r - 2, 0, Math.PI * 2, true);
                                //ctx.fillStyle = "#00aa00";
                                //ctx.fill();
                            //}
                        }
                    }
                    //рисование вертикальных линий
                    for (var x = 0.5; x < arena.width; x += sizeOfCell) {
                        ctx.moveTo(x, 0);
                        ctx.lineTo(x, arena.height);
                    }
                    //рисование горизонтальных линий
                    for (var y = 0.5; y < arena.height; y += sizeOfCell) {
                        ctx.moveTo(0, y);
                        ctx.lineTo(arena.width, y);
                    }
                    ctx.strokeStyle = "#eee";
                    ctx.stroke();

                    showPlayer(0, ctx);
                    showPlayer(1, ctx);
                    showPlayer(2, ctx);
                    showPlayer(3, ctx);
                }
            };

            drawPlayers = function (name, prevPos, curPos, ctx) {
                var p = -1;
                switch (name) {
                    case names[0]:
                        p = 0;
                        break;
                    case names[1]:
                        p = 1;
                        break;
                    case names[2]:
                        p = 2;
                        break;
                    case names[3]:
                        p = 3;
                        break;
                    default:
                        alert("undefined player");
                }
                if (p == -1) {
                    alert("error with selection player");
                }
                showPlayer(p, ctx);
            }

            showPlayer = function (p, ctx) {
                if (players_connect[p]) {
                    var r = 0.5 * sizeOfCell;
                    ctx.beginPath();
                    var x = players_x[p];
                    var y = players_y[p];
                    ctx.arc(y * sizeOfCell + r,
                            x * sizeOfCell + r,
                            r - 2, 0, Math.PI * 2, true);
                    ctx.fillStyle = players_colors[p];
                    ctx.fill();
                }
            };

            var game = $.connection.gameHub;

            game.client.showMap = function (worldModel) {
                map = worldModel.Map.slice();
                showWorld();
            };

            game.client.showMovements = function (round, name, prevPos, curPos) {
                map[prevPos.Y][prevPos.X] = 0;
                map[curPos.Y][curPos.X] = 2;
                showWorld();
            };
            var isCrashed = false;
            game.client.onCrash = function () {
                alert("You lose :(");
                isCrashed = true;
                document.getElementById('sendmessage').disabled = true;
            };
            game.client.beginNextRound = function () {
                if (!isCrashed) {
                    document.getElementById('sendmessage').disabled = false;
                }
            };
            game.client.showEndOfGame = function (isWinner) {
                if (isWinner) {
                    alert("You win!");
                } else {
                    if (!isCrashed) {
                        alert("You lose :(");
                    }
                }
                document.location.href = "/";
            };
            $('#message').focus();
            $.connection.hub.start()
                .done(function () {
                    $('#sendmessage')
                        .click(function () {
                            game.server.updatePlayer({
                                key: $('#message').val()
                            });
                            $('#message').val('').focus();
                            document.getElementById('sendmessage').disabled = true;
                        });
                });
        });
    </script>
}
