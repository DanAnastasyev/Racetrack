@{
    ViewBag.Title = "Game";
}
<!DOCTYPE html>
<html>
<head>
</head>
<body>
    <h2>Racetrack</h2>
    <div class="container">
        <input type="text" id="message" />
        <input type="button" id="sendmessage" value="Send" />
        <input type="hidden" id="displayname" />
    </div>
    <canvas id="arena"></canvas>
</body>
</html>
@section scripts {
    <!--Script references. -->
    <!--Reference the jQuery library. -->
    <script src="../../Scripts/jquery-3.1.1.min.js"></script>
    <!--Reference the SignalR library. -->
    <script src="../../Scripts/jquery.signalR-2.2.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--Add script to update the page and send messages.-->
    <script type="text/javascript">
        $(function () {
            var map;
            var arena_color = "#0000aa";
            var numOfPlayers = 0;
            var maxNumOfPlayers = 4;
            var names = [];
            var players_id = [0, 1, 2, 3];
            var players_x = [1, 2, 3, 4];
            var players_y = [17, 17, 17, 17];
            var players_colors = ["#4cff00", "#ff0000", "#0000ff", "#ff00ff"];
            var players_connect = [1, 1, 1, 1]; // показывает подключен ли данный игрок // гряхный хак

            var sizeOfCell = 32; //размер одной клетки

            function showWorld() {
                // arena - отрисовка фона
                var arena = document.getElementById('arena');
                if (arena.getContext) {
                    var ctx = arena.getContext('2d');
                    var n = map.length; // количество клеток - считаем что поле квадратное
                    arena.width = sizeOfCell * n;
                    arena.height = sizeOfCell * n;

                    for (var i = 0; i < map.length; ++i) {
                        for (var j = 0; j < map[i].length; ++j) {
                            if (map[i][j] == 1) {
                                //ctx.fillStyle = "#0000aa";
                                ctx.fillStyle = arena_color;
                                ctx.fillRect(j * sizeOfCell, i * sizeOfCell, sizeOfCell, sizeOfCell);
                            }
                        }
                    }
                    //рисование вертикальных линий
                    for (var x = 0.5; x < arena.width; x += sizeOfCell) {
                        ctx.moveTo(x, 0);
                        ctx.lineTo(x, arena.height);
                    }
                    //рисование горизонтальных линий
                    for (var y = 0.5; y < arena.height; y += sizeOfCell) {
                        ctx.moveTo(0, y);
                        ctx.lineTo(arena.width, y);
                    }
                    ctx.strokeStyle = "#eee";
                    ctx.stroke();
                    //рисование всех игроков
                    for (var p = 0; p < maxNumOfPlayers; p++) {
                        showPlayer2(p, ctx);
                    }
                }
            };

            //drawPlayers = function (name, prevPos, curPos, ctx) {
            //    var p = -1;
            //    switch (name) {
            //        case names[0]:
            //            p = 0;
            //            break;
            //        case names[1]:
            //            p = 1;
            //            break;
            //        case names[2]:
            //            p = 2;
            //            break;
            //        case names[3]:
            //            p = 3;
            //            break;
            //        default:
            //            alert("undefined player");
            //    }
            //    if (p == -1) {
            //        alert("error with selection player");
            //    }
            //    showPlayer(p, ctx);
            //}

            showPlayer = function (p, ctx) {
                if (players_connect[p]) {
                    var r = 0.5 * sizeOfCell;
                    ctx.beginPath();
                    var x = players_x[p];
                    var y = players_y[p];
                    ctx.arc(x * sizeOfCell + r,
                            y * sizeOfCell + r,
                            r - 2, 0, Math.PI * 2, true);
                    ctx.fillStyle = players_colors[p];
                    ctx.fill();
                }
            };

            showPlayer2 = function (p, ctx) {
                if (players_connect[p]) {
                    var r = 0.5 * sizeOfCell;
                    var x = players_x[p];
                    var y = players_y[p];
                    ctx.strokeStyle = players_colors[p];
                    ctx.fillStyle = players_colors[p];
                    // 7 8 9
                    // 4 5 6
                    // 1 2 3 
                    ctx.beginPath(); ctx.arc(x * sizeOfCell - r, y * sizeOfCell - r, r - 2, 0, Math.PI * 2, true); ctx.stroke(); //7
                    ctx.beginPath(); ctx.arc(x * sizeOfCell + r, y * sizeOfCell - r, r - 2, 0, Math.PI * 2, true); ctx.stroke(); //8
                    ctx.beginPath(); ctx.arc((x + 1) * sizeOfCell + r, y * sizeOfCell - r, r - 2, 0, Math.PI * 2, true); ctx.stroke(); //9
                    ctx.beginPath(); ctx.arc(x * sizeOfCell - r, y * sizeOfCell + r, r - 2, 0, Math.PI * 2, true); ctx.stroke(); //4
                    ctx.beginPath(); ctx.arc(x * sizeOfCell + r, y * sizeOfCell + r, r - 2, 0, Math.PI * 2, true); ctx.fill(); //5
                    ctx.beginPath(); ctx.arc((x + 1) * sizeOfCell + r, y * sizeOfCell + r, r - 2, 0, Math.PI * 2, true); ctx.stroke(); //6
                    ctx.beginPath(); ctx.arc(x * sizeOfCell - r, (y + 1) * sizeOfCell + r, r - 2, 0, Math.PI * 2, true); ctx.stroke(); //1
                    ctx.beginPath(); ctx.arc(x * sizeOfCell + r, (y + 1) * sizeOfCell + r, r - 2, 0, Math.PI * 2, true); ctx.stroke(); //2
                    ctx.beginPath(); ctx.arc((x + 1) * sizeOfCell + r, (y + 1) * sizeOfCell + r, r - 2, 0, Math.PI * 2, true); ctx.stroke(); //3
                }
            };

            showPlayerScope = function (p, ctx) {
                var r = 0.5 * sizeOfCell;
                var x = players_x[p];
                var y = players_y[p];
                ctx.beginPath();
                // 7 8 9
                // 4 5 6
                // 1 2 3 
                ctx.arc(x * sizeOfCell - r, y * sizeOfCell - r, r - 2, 0, Math.PI * 2, true); //ctx.stroke(); //7
                ctx.arc(x * sizeOfCell + r, y * sizeOfCell - r, r - 2, 0, Math.PI * 2, true); //ctx.stroke(); //8
                ctx.arc((x+1) * sizeOfCell + r, y * sizeOfCell - r, r - 2, 0, Math.PI * 2, true); //ctx.stroke(); //9
                ctx.arc(x * sizeOfCell - r, y * sizeOfCell, r - 2, 0, Math.PI * 2, true); //ctx.stroke(); //4
                ctx.arc((x+1) * sizeOfCell + r, y * sizeOfCell, r - 2, 0, Math.PI * 2, true); //ctx.stroke(); //6
                ctx.arc(x * sizeOfCell - r, (y+1) * sizeOfCell + r, r - 2, 0, Math.PI * 2, true); //ctx.stroke(); //1
                ctx.arc(x * sizeOfCell + r, (y + 1) * sizeOfCell + r, r - 2, 0, Math.PI * 2, true); //ctx.stroke(); //2
                ctx.arc((x + 1) * sizeOfCell - r, (y + 1) * sizeOfCell + r, r - 2, 0, Math.PI * 2, true); //ctx.stroke(); //3
                ctx.fillStyle = players_colors[p];
                ctx.stroke();
            }

            var game = $.connection.gameHub;

            game.client.showMap = function (worldModel) {
                map = worldModel.Map.slice();
                showWorld();
            };

            getPlayerId = function (name) {
                var p = -1;
                switch (name) {
                    case names[0]:
                        p = 0;
                        break;
                    case names[1]:
                        p = 1;
                        break;
                    case names[2]:
                        p = 2;
                        break;
                    case names[3]:
                        p = 3;
                        break;
                    default:
                        alert("undefined player in getPlayerId");
                }
                return p;
            };

            setPos = function (p, curPos) {
                //alert("old poses x = " + players_x[p] + " y = " + players_y[p])
                players_x[p] = curPos.X;
                players_y[p] = curPos.Y;
                //alert("new poses x = " + players_x[p] + " y = " + players_y[p])
            };

            game.client.showMovements = function (round, name, prevPos, curPos) {
                map[prevPos.Y][prevPos.X] = 0;
                map[curPos.Y][curPos.X] = 2;
                var p = -1;
                //alert("round = " + round);
                if (round == 0) {
                    if (names.length <= maxNumOfPlayers) {
                        names.push(name);
                        //alert("names.length = " + names.length);
                        players_connect[numOfPlayers] = 1;
                        numOfPlayers++;
                    } else {
                        alert("There is maxNumOfPlayers limit = 4");
                    }
                }
                p = getPlayerId(name);
                //alert("p = getPlayerId(name) = " + p);
                setPos(p, curPos);
                //alert("name[ p = " + p + " ] = " + names[p]);
                showWorld();
                //showPlayerScope(p);
            };
            var isCrashed = false;
            game.client.onCrash = function () {
                alert("You lose :(");
                isCrashed = true;
                document.getElementById('sendmessage').disabled = true;
            };
            game.client.beginNextRound = function () {
                if (!isCrashed) {
                    document.getElementById('sendmessage').disabled = false;
                }
            };
            game.client.showEndOfGame = function (isWinner) {
                if (isWinner) {
                    alert("You win!");
                } else {
                    if (!isCrashed) {
                        alert("You lose :(");
                    }
                }
                document.location.href = "/";
            };
            $('#message').focus();
            $.connection.hub.start()
                .done(function () {
                    $('#sendmessage')
                        .click(function () {
                            game.server.updatePlayer({
                                key: $('#message').val()
                            });
                            $('#message').val('').focus();
                            document.getElementById('sendmessage').disabled = true;
                        });
                });
        });
    </script>
}
